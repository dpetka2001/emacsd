#+PROPERTY: header-args  :tangle "settings.el"


* Jrn23's emacs literal config
:PROPERTIES:
:TOC:      :include all :depth 5 :ignore (this)
:END:
:CONTENTS:
- [[#emacs-environment][Emacs environment]]
    - [[#packages-sources][Packages sources]]
    - [[#use-package-config][Use-package config]]
    - [[#environment][Environment]]
      - [[#initialization][Initialization]]
      - [[#setup-facesthemes][Setup faces/themes]]
      - [[#configure-parenthesesbraces][Configure parentheses/braces]]
      - [[#keyboard-shortcuts][Keyboard shortcuts]]
      - [[#aliases][Aliases]]
      - [[#helpful-package-to-provide-more-elaborate-help][Helpful (package to provide more elaborate help)]]
  - [[#package-setup][Package setup]]
    - [[#misc][Misc]]
      - [[#automatic-update-packages][Automatic Update Packages]]
      - [[#configure-org][Configure Org]]
      - [[#move-lines][Move Lines]]
      - [[#multiple-cursors][Multiple cursors]]
      - [[#ivy-and-derivatives][Ivy and derivatives]]
      - [[#auto-completion][Auto-Completion]]
      - [[#yasnippet][Yasnippet]]
      - [[#doremi-window-resize][Doremi (window resize)]]
      - [[#rfc-mode][RFC mode]]
      - [[#esup-emacs-profiler][Esup (emacs profiler)]]
    - [[#programming][Programming]]
      - [[#magit][Magit]]
      - [[#lsp][LSP]]
      - [[#python][Python]]
      - [[#projectile][Projectile]]
:END:


** Emacs environment
*** Packages sources
#+begin_src emacs-lisp
   (require 'package)
   (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                            ("melpa" . "http://melpa.org/packages/")
                            ("org" . "http://orgmode.org/elpa/")))
   ;; Instead load them explicitly.
   ;; This must be initialized after `package-archives' is set in order to read all 
   ;; the archives and set `package-archive-contents' correctly.
   (package-initialize)
   (unless package-archive-contents
     (package-refresh-contents t))
#+end_src

*** Use-package config
#+begin_src emacs-lisp
   ;; install use-package if not already done
   (if (not (package-installed-p 'use-package))
       (progn
         (unless package-archive-contents
           (package-refresh-contents t))
         (package-install 'use-package)))
   ;; use-package for all others
   (require 'use-package)
   ;; use-package verbose output
   (setq use-package-verbose t)
   ;; Delight package to hide/abbreviate modes in modeline
   (use-package delight
     :ensure t)
#+end_src
   
*** Environment
**** Initialization
#+begin_src emacs-lisp
   ;; Set default dir and custom file
   ;; Take into consideration if OS is Windows or Linux
   (if (eq system-type 'windows-nt)
       (progn 
         (setq default-directory     "C:/Users/jrn23/AppData/Roaming/.emacs.d/")
         (setq custom-file           "C:/Users/jrn23/AppData/Roaming/.emacs.d/emacs-custom.el")
         (setq user-emacs-directory  "C:/Users/jrn23/AppData/Roaming/.emacs.d/"))
         else 
         (setq default-directory     "~/.emacs.d/")
         (setq custom-file           "~/.emacs.d/emacs-custom.el")
         (setq user-emacs-directory  "~/.emacs.d/")
         )

   (load custom-file)

   ;; Dirs for local package install
   (add-to-list 'load-path (concat user-emacs-directory "lisp/"))

   ;; Don't show initial screen
   (setq inhibit-startup-screen t)

   ;; Enable desktop-save-mode only when the first frame has come up.
   ;; This prevents Emacs from stalling when run as a daemon.
   (add-hook 'server-after-make-frame-hook
        (lambda ()
          (progn
          (if (desktop-save-mode nil)
              (desktop-save-mode 1))
          (if (daemonp) (setq desktop-restore-frames nil))
          (desktop-read)
          ;; Load theme here as well for when emacs is started as daemon
          (load-theme 'dracula t)
          ;; Change show-paren-match face because `dracula' theme sets its own
          (set-face-attribute 'show-paren-match nil :weight 'bold
                              :foreground "white" :background "red")
            )
          )
        )

   ;; show line numbers
   (global-linum-mode t)
   (column-number-mode t)
   (global-hl-line-mode t)
   (use-package hlinum
     :ensure t
     :config
     (hlinum-activate)
     )

#+end_src

**** Setup faces/themes
#+begin_src emacs-lisp
   ;; You won't need any of the bar thingies,
   ;; turn it off to save screen estate
   (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
   (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))

   (setq scroll-margin 0
         scroll-conservatively 100000
         scroll-preserve-screen-position 1)

   ;; The blinking cursor is nothing, but an annoyance
   (blink-cursor-mode -1)

   ;; Set the file size indication to true
   (size-indication-mode t)

   ;; Themes configuration
   (when (display-graphic-p)
     (use-package abyss-theme
       :ensure t
       :defer t
       :config
       ;;(load-theme 'abyss t)
       )
     (use-package color-theme-modern
       :ensure t
       :defer t
       )
     (use-package dracula-theme
       :ensure t
       :config
       (load-theme 'dracula t)
       ;; Change show-paren-match face because `dracula' theme sets its own
       (set-face-attribute 'show-paren-match nil :weight 'bold
                           :foreground "white" :background "red")
       )
     )

   ;; Modelines
   (use-package powerline
     :ensure t
     :config
     (powerline-center-theme)
     )
#+end_src

**** Configure parentheses/braces
#+begin_src emacs-lisp
   (show-paren-mode 1)
   (electric-pair-mode 1)
#+end_src
   
**** Keyboard shortcuts
#+begin_src emacs-lisp
   ;; Number keys to open file lists
   (recentf-mode 1)
   (global-set-key (kbd "M-1") 'recentf-open-files)
   (global-set-key (kbd "M-2") 'ibuffer)

   ;; Package to show number of window and switch to window according to number
   (use-package window-number
     :ensure t
     :commands window-number-switch
     :bind
       (("M-0" . window-number-switch)
         )
     ;; :config
     ;; (window-number-mode 1)
     )
#+end_src

**** Aliases
#+begin_src emacs-lisp
   ;; y or n is enough
   (defalias 'yes-or-no-p 'y-or-n-p)
   (defalias 'eb 'eval-buffer)
   (defalias 'lp 'package-list-packages)
#+end_src

**** Helpful (package to provide more elaborate help)
#+begin_src emacs-lisp
   (use-package helpful
     :ensure t
     :bind
     (("C-h k" . helpful-key)
      ("C-h c" . helpful-command)
      ("C-x C-d" . helpful-at-point)
      )
     :config
     (setq counsel-describe-function-function #'helpful-callable)
     (setq counsel-describe-variable-function #'helpful-variable)
     )
#+end_src

** Package setup

*** Misc
**** Automatic Update Packages

**** Configure Org
#+begin_src emacs-lisp
   (use-package org
     :ensure t
     :bind (("C-c a" . org-agenda)
       )
     :config
       ;; Package required for expanding snippets to code block structures
       (use-package org-tempo)
       ;; Set the value to `nil', so that org does not load unnecessary modules that increase start up time
       (setq org-modules nil)
       (setq org-startup-folded nil)
       (add-hook 'org-mode-hook 'org-indent-mode)
       (setq org-indent-mode-turns-on-hiding-stars nil)
       ;; (delight 'org-indent-mode "" 'org-indent)
       (setq org-edit-src-content-indentation 3)
       (setq org-src-window-setup 'split-window-below)
       ;; Disable symbol's `<' pairing for electric pairing in org mode locally
       (add-hook 'org-mode-hook
       (lambda ()
            (setq-local electric-pair-inhibit-predicate
               `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c)))))
       )
     )
#+end_src

**** Move Lines
#+begin_src emacs-lisp
   ;; Package to move around lines/regions
   (use-package move-lines
     :ensure nil           ;; Local package in `/lisp' directory
     :config
     (move-lines-binding)
     )
#+end_src

**** Multiple cursors
#+begin_src emacs-lisp
   (use-package multiple-cursors
     :ensure t
     :bind (("C-S-c C-S-c" . mc/edit-lines)
            ("C->" . mc/mark-next-like-this)
            ("C-<" . mc/mark-previous-like-this)
            ("C-c C-<" . 'mc/mark-all-like-this))
     )
#+end_src

**** Ivy and derivatives
#+begin_src emacs-lisp
   (use-package ivy
     :ensure t
     :delight
     :defer 0.1
     :bind (("C-c C-r" . ivy-resume)
            ("C-x B" . ivy-switch-buffer-other-window))
     :custom
     (ivy-count-format "(%d/%d) ")
     (ivy-use-virtual-buffers t)
     :config
       (ivy-mode)
     )

   (use-package ivy-rich
     :hook (ivy-mode . ivy-rich-mode)
     :custom (ivy-rich-path-style 'abbrev)
     :config
     (ivy-rich-modify-columns
      'ivy-switch-buffer
      '((ivy-rich-switch-buffer-size (:align right))
        (ivy-rich-switch-buffer-major-mode (:width 20 :face error)))
        )
     )

   (use-package counsel
     :ensure t
     :delight
     :after ivy
     :bind
     ("C-c g" . counsel-outline)
     :config
     (counsel-mode)
     ;; Disable `describe-bindings' remap
     (define-key counsel-mode-map [remap describe-bindings] nil)

     ;; Install smex to use under the hood to display most recently used command history
     (use-package smex
       :ensure t
       )
     )

   (use-package swiper
     :after (ivy counsel)
     :bind (("C-s" . swiper)
            ("C-r" . swiper))
     :config
     ;; Disable `counsel-M-x' and `describe-symbol-functions' to start with "^"
     ;; Put it here to make sure both ivy+counsel are loaded before setting values
     (setcdr (assoc 'counsel-M-x ivy-initial-inputs-alist) "")
     (setcdr (assoc 'counsel-describe-symbol ivy-initial-inputs-alist) "")
     )
#+end_src

**** Auto-Completion
#+begin_src emacs-lisp
   (use-package company
     :ensure t
     :defer 0.5
     ;;:delight
     :custom
     (company-begin-commands '(self-insert-command))
     (company-idle-delay .1)
     (company-minimum-prefix-length 2)
     (company-show-numbers t)
     (company-tooltip-align-annotations 't)
     ;; Disable company-mode from running in ivy-mode and window-number-mode
     (company-global-modes '(not ivy-mode window-number-mode))
     (global-company-mode 1)
     )

   ;; A company front-end with icons
   (use-package company-box
     :ensure t
     :after company
     :delight
     :hook (company-mode . company-box-mode)
     )
#+end_src

**** Yasnippet
#+begin_src emacs-lisp
   (use-package yasnippet
     :ensure t
     :hook (org-mode . yas-minor-mode)
     :config
     (yas-reload-all)
     (add-hook 'prog-mode-hook #'yas-minor-mode)
     (use-package yasnippet-snippets
       :ensure t
       :after yasnippet)
     )
#+end_src

**** Doremi (window resize)
#+begin_src emacs-lisp
   (use-package doremi
     :ensure nil
     :commands
     (doremi-prefix doremi-window-height+ doremi-window-width+)
     :config
     (use-package doremi-cmd
       :ensure nil
       :after doremi
       :config
       (defalias 'doremi-prefix (make-sparse-keymap))
       (defvar doremi-map (symbol-function 'doremi-prefix)
         "Keymap for Do Re Mi commands.")
       (define-key global-map "\C-xt" 'doremi-prefix)
       (define-key doremi-map "h" 'doremi-window-height+)
       (define-key doremi-map "w" 'doremi-window-width+)
       )
     )
#+end_src

**** RFC mode
#+begin_src emacs-lisp
   (use-package rfc-mode
     :ensure t
     :defer t
     :custom
     (rfc-mode-directory (expand-file-name "~/.emacs.d/rfc"))
     )
#+end_src

**** Esup (emacs profiler)
#+begin_src emacs-lisp
   (use-package esup
     :ensure t
     :defer t
     )
#+end_src

*** Programming
**** Magit
#+begin_src emacs-lisp
   (use-package magit
     :ensure t
     :bind (("C-x g s" . magit-status)
            ("C-x g m" . magit-branch))
     :config
     (set-default 'magit-stage-all-confirm nil)
     (add-hook 'magit-mode-hook 'magit-load-config-extensions)

     ;; full screen magit-status
     (defadvice magit-status (around magit-fullscreen activate)
       (window-configuration-to-register :magit-fullscreen)
       ad-do-it
       (delete-other-windows))
     )
#+end_src

**** LSP
In order to be able to use different LSP (Language Server Protocol) server according to the programming language that we want to use, we need a 
client for LSP. That’s where lsp-mode comes in!

#+begin_src emacs-lisp
   (use-package lsp-mode
     :ensure t
     :hook ((c-mode c++-mode dart-mode java-mode json-mode python-mode typescript-mode xml-mode) . lsp)
     :custom
     (lsp-clients-typescript-server-args '("--stdio" "--tsserver-log-file" "/dev/stderr"))
     (lsp-enable-folding nil)
     (lsp-enable-links nil)
     (lsp-enable-snippet nil)
     (lsp-prefer-flymake nil)
     (lsp-session-file (expand-file-name (format "%s/emacs/lsp-session-v1" xdg-data)))
     (lsp-restart 'auto-restart)
     )

   (use-package lsp-ui
     :ensure t
     :after lsp-mode
     )

   (use-package dap-mode
     :ensure t
     :after lsp-mode
     :config
     (dap-mode t)
     (dap-ui-mode t)
     )
#+end_src

Another benefit of using LSP to configure the management of your programming language is that LSP servers are also used by other text editors. This, 
increasing contributions to these packages.

**** Python
You have to install `/pyright/' with system package manager as well for this to work.

#+begin_src emacs-lisp
   (use-package lsp-pyright
     :ensure t
     :if (executable-find "pyright")
     :hook (python-mode . (lambda ()
                            (require 'lsp-pyright)
                            (lsp)))
     )

   (use-package lsp-python-ms
     :ensure t
     :defer 0.3
     :custom (lsp-python-ms-auto-install-server t)
     )

   (use-package python
     :delight "π "
     :bind (("M-[" . python-nav-backward-block)
            ("M-]" . python-nav-forward-block))
     :preface
     (defun python-remove-unused-imports()
       "Removes unused imports and unused variables with autoflake."
       (interactive)
       (if (executable-find "autoflake")
           (progn
             (shell-command (format "autoflake --remove-all-unused-imports -i %s"
                                    (shell-quote-argument (buffer-file-name))))
             (revert-buffer t t t))
         (warn "python-mode: Cannot find autoflake executable.")))
     )

   (use-package pyenv-mode
     :ensure t
     :after python
     :hook ((python-mode . pyenv-mode)
            (projectile-switch-project . projectile-pyenv-mode-set))
     :custom (pyenv-mode-set "3.8.5")
     :preface
     (defun projectile-pyenv-mode-set ()
       "Set pyenv version matching project name."
       (let ((project (projectile-project-name)))
         (if (member project (pyenv-mode-versions))
             (pyenv-mode-set project)
           (pyenv-mode-unset))))
     )

   (use-package pyvenv
     :ensure t
     :after python
     :hook ((python-mode . pyvenv-mode)
            (python-mode . (lambda ()
                             (if-let ((pyvenv-directory (find-pyvenv-directory (buffer-file-name))))
                                 (pyvenv-activate pyvenv-directory))
                             (lsp))))
     :custom
     (pyvenv-default-virtual-env-name "env")
     (pyvenv-mode-line-indicator '(pyvenv-virtual-env-name ("[venv:"
                                                            pyvenv-virtual-env-name "]")))
     :preface
     (defun find-pyvenv-directory (path)
       "Checks if a pyvenv directory exists."
       (cond
        ((not path) nil)
        ((file-regular-p path) (find-pyvenv-directory (file-name-directory path)))
        ((file-directory-p path)
         (or
          (seq-find
           (lambda (path) (file-regular-p (expand-file-name "pyvenv.cfg" path)))
           (directory-files path t))
          (let ((parent (file-name-directory (directory-file-name path))))
            (unless (equal parent path) (find-pyvenv-directory parent)))))))
     )
#+end_src

**** Projectile
#+begin_src emacs-lisp
   (use-package projectile
     :ensure t
     :init
     (projectile-mode 1)
     :delight '(:eval (concat " [" (projectile-project-name) "]"))
     :bind (:map projectile-mode-map
                 ;; Set the prefix so that keybindings are available
                 ("C-c p" . projectile-command-map)      
                 ("C-c p f" . projectile-find-file)
                 ("C-c p p" . projectile-switch-project)
                 ("C-c p m" . projectile-commander))
     :config
     (use-package counsel-projectile
       :ensure t
       :after projectile
       :config
       (counsel-projectile-mode 1)
       )
     (setq projectile-completion-system 'ivy)
     (setq projectile-enable-caching t) ; Enable cache
     (setq projectile-switch-project-action 'counsel-projectile)
     )

#+end_src
